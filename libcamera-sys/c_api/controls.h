#ifndef __LIBCAMERA_C_CONTROLS__
#define __LIBCAMERA_C_CONTROLS__

#ifdef __cplusplus
#include <libcamera/controls.h>

typedef libcamera::ControlList libcamera_control_list_t;
typedef libcamera::ControlInfoMap libcamera_control_info_map_t;

extern "C" {
#else
typedef struct libcamera_control_list_t libcamera_control_list_t;
typedef struct libcamera_control_info_map_t libcamera_control_info_map_t;
#endif

enum libcamera_control_id {
	LIBCAMERA_CONTROL_AE_ENABLE = 1,
	LIBCAMERA_CONTROL_AE_LOCKED = 2,
	LIBCAMERA_CONTROL_AE_METERING_MODE = 3,
	LIBCAMERA_CONTROL_AE_CONSTRAINT_MODE = 4,
	LIBCAMERA_CONTROL_AE_EXPOSURE_MODE = 5,
	LIBCAMERA_CONTROL_EXPOSURE_VALUE = 6,
	LIBCAMERA_CONTROL_EXPOSURE_TIME = 7,
	LIBCAMERA_CONTROL_ANALOGUE_GAIN = 8,
	LIBCAMERA_CONTROL_BRIGHTNESS = 9,
	LIBCAMERA_CONTROL_CONTRAST = 10,
	LIBCAMERA_CONTROL_LUX = 11,
	LIBCAMERA_CONTROL_AWB_ENABLE = 12,
	LIBCAMERA_CONTROL_AWB_MODE = 13,
	LIBCAMERA_CONTROL_AWB_LOCKED = 14,
	LIBCAMERA_CONTROL_COLOUR_GAINS = 15,
	LIBCAMERA_CONTROL_COLOUR_TEMPERATURE = 16,
	LIBCAMERA_CONTROL_SATURATION = 17,
	LIBCAMERA_CONTROL_SENSOR_BLACK_LEVELS = 18,
	LIBCAMERA_CONTROL_SHARPNESS = 19,
	LIBCAMERA_CONTROL_FOCUS_FO_M = 20,
	LIBCAMERA_CONTROL_COLOUR_CORRECTION_MATRIX = 21,
	LIBCAMERA_CONTROL_SCALER_CROP = 22,
	LIBCAMERA_CONTROL_DIGITAL_GAIN = 23,
	LIBCAMERA_CONTROL_FRAME_DURATION = 24,
	LIBCAMERA_CONTROL_FRAME_DURATION_LIMITS = 25,
	LIBCAMERA_CONTROL_SENSOR_TEMPERATURE = 26,
	LIBCAMERA_CONTROL_SENSOR_TIMESTAMP = 27,
	LIBCAMERA_CONTROL_AF_MODE = 28,
	LIBCAMERA_CONTROL_AF_RANGE = 29,
	LIBCAMERA_CONTROL_AF_SPEED = 30,
	LIBCAMERA_CONTROL_AF_METERING = 31,
	LIBCAMERA_CONTROL_AF_WINDOWS = 32,
	LIBCAMERA_CONTROL_AF_TRIGGER = 33,
	LIBCAMERA_CONTROL_AF_PAUSE = 34,
	LIBCAMERA_CONTROL_LENS_POSITION = 35,
	LIBCAMERA_CONTROL_AF_STATE = 36,
	LIBCAMERA_CONTROL_AF_PAUSE_STATE = 37,
	LIBCAMERA_CONTROL_AE_PRECAPTURE_TRIGGER = 38,
	LIBCAMERA_CONTROL_NOISE_REDUCTION_MODE = 39,
	LIBCAMERA_CONTROL_COLOR_CORRECTION_ABERRATION_MODE = 40,
	LIBCAMERA_CONTROL_AE_STATE = 41,
	LIBCAMERA_CONTROL_AWB_STATE = 42,
	LIBCAMERA_CONTROL_SENSOR_ROLLING_SHUTTER_SKEW = 43,
	LIBCAMERA_CONTROL_LENS_SHADING_MAP_MODE = 44,
	LIBCAMERA_CONTROL_SCENE_FLICKER = 45,
	LIBCAMERA_CONTROL_PIPELINE_DEPTH = 46,
	LIBCAMERA_CONTROL_MAX_LATENCY = 47,
	LIBCAMERA_CONTROL_TEST_PATTERN_MODE = 48,
};

enum libcamera_property_id {
	LIBCAMERA_PROPERTY_LOCATION = 1,
	LIBCAMERA_PROPERTY_ROTATION = 2,
	LIBCAMERA_PROPERTY_MODEL = 3,
	LIBCAMERA_PROPERTY_UNIT_CELL_SIZE = 4,
	LIBCAMERA_PROPERTY_PIXEL_ARRAY_SIZE = 5,
	LIBCAMERA_PROPERTY_PIXEL_ARRAY_OPTICAL_BLACK_RECTANGLES = 6,
	LIBCAMERA_PROPERTY_PIXEL_ARRAY_ACTIVE_AREAS = 7,
	LIBCAMERA_PROPERTY_SCALER_CROP_MAXIMUM = 8,
	LIBCAMERA_PROPERTY_SENSOR_SENSITIVITY = 9,
	LIBCAMERA_PROPERTY_COLOR_FILTER_ARRANGEMENT = 10,
};

enum libcamera_control_type {
	LIBCAMERA_CONTROL_TYPE_NONE,
	LIBCAMERA_CONTROL_TYPE_BOOL,
	LIBCAMERA_CONTROL_TYPE_BYTE,
	LIBCAMERA_CONTROL_TYPE_INT32,
	LIBCAMERA_CONTROL_TYPE_INT64,
	LIBCAMERA_CONTROL_TYPE_FLOAT,
	LIBCAMERA_CONTROL_TYPE_STRING,
	LIBCAMERA_CONTROL_TYPE_RECTANGLE,
	LIBCAMERA_CONTROL_TYPE_SIZE,
};

const char *libcamera_control_name(enum libcamera_control_id id);
enum libcamera_control_type libcamera_control_type(enum libcamera_control_id id);

const char *libcamera_property_name(enum libcamera_property_id id);
enum libcamera_control_type libcamera_property_type(enum libcamera_property_id id);

// const libcamera_control_id_t *libcamera_control_id(unsigned int id);
// const libcamera_control_id_t *libcamera_property_id(unsigned int id);

// unsigned int libcamera_control_id_id(const libcamera_control_id_t *ctrl_id);
// const char *libcamera_control_id_name(const libcamera_control_id_t *ctrl_id);
// unsigned int libcamera_control_id_type(const libcamera_control_id_t *ctrl_id);
// libcamera_control_id_t *libcamera_control_id_copy(const libcamera_control_id_t *ctrl_id);

#ifdef __cplusplus
}
#endif

#endif
