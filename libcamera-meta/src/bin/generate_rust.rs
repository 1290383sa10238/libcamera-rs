use indoc::printdoc;
use libcamera_meta::{control_ids, property_ids, Control, ControlType};

fn format_docstring(desc: &str, indent: usize) -> String {
    desc.trim()
        .split("\n")
        .map(|line| format!("{}/// {}\n", " ".repeat(indent), line))
        .collect::<String>()
}

fn to_rust_type(t: ControlType) -> &'static str {
    match t {
        ControlType::Bool => "bool",
        ControlType::Byte => "u8",
        ControlType::Int32 => "i32",
        ControlType::Int64 => "i64",
        ControlType::Float => "f32",
        ControlType::String => "String",
        ControlType::Rectangle => "()",
        ControlType::Size => "()",
    }
}

fn generate_controls(controls: &Vec<Control>, name: &str) {
    let mut i = 1;
    println!("pub enum {} {{", name);
    for ctrl in controls.iter() {
        print!("{}", format_docstring(&ctrl.description, 4));
        println!("    {} = {},", &ctrl.name, i);
        i += 1;
    }
    println!("}}\n");

    for ctrl in controls.iter() {
        let ctrl_name = &ctrl.name;
        let ctrl_type = to_rust_type(ctrl.typ);

        print!("{}", format_docstring(&ctrl.description, 0));
        if let Some(enumeration) = &ctrl.enumeration {
            let mut try_from = String::new();

            println!("pub enum {ctrl_name} {{");
            for val in enumeration {
                let var_name = val.name.replace(&ctrl.name, "");

                print!("{}", format_docstring(&val.description, 4));
                println!("    {var_name} = {},", val.value);
                try_from.push_str(&format!("{} => Ok(Self::{var_name}),\n", val.value));
            }
            println!("}}\n");

            let try_from = try_from.trim();
            printdoc! {"
                impl TryFrom<{ctrl_type}> for {ctrl_name} {{
                    type Error = ();

                    fn try_from(value: {ctrl_type}) -> Result<Self, Self::Error> {{
                        match value {{
                            {try_from}
                            _ => Err(())
                        }}
                    }}
                }}

                impl Into<{ctrl_type}> for {ctrl_name} {{
                    fn into(self) -> {ctrl_type} {{
                        self as _
                    }}
                }}

                impl Control for {ctrl_name} {{
                    type T = {ctrl_type};
                }}\n
            "};
        } else {
            println!("pub struct {ctrl_name}(pub {ctrl_type});\n");

            printdoc! {"
                impl TryFrom<{ctrl_type}> for {ctrl_name} {{
                    type Error = Infallible;

                    fn try_from(value: {ctrl_type}) -> Result<Self, Self::Error> {{
                        Ok(Self(value))
                    }}
                }}

                impl Into<{ctrl_type}> for {ctrl_name} {{
                    fn into(self) -> {ctrl_type} {{
                        self.0
                    }}
                }}

                impl Control for {ctrl_name} {{
                    type T = {ctrl_type};
                }}\n
            "};
        }
    }
}

fn main() {
    println!("/// Generated by `cargo run --bin generate_c`\n");
    println!("use std::convert::Infallible;");
    println!("use crate::Control;\n");

    let controls = control_ids();
    generate_controls(&controls, "ControlId");

    let properties = property_ids();
    generate_controls(&properties, "PropertyId");
}
